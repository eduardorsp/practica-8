#include "../config_header.h"
#define _XTAL_FREQ 1000000
#define LCD_DATA_R      PORTD
#define LCD_DATA_W      LATD
#define LCD_DATA_DIR    TRISD
#define LCD_RS          LATCbits.LATC2
#define LCD_RS_DIR      TRISCbits.TRISC2
#define LCD_RW          LATCbits.LATC1
#define LCD_RW_DIR      TRISCbits.TRISC1
#define LCD_E           LATCbits.LATC0
#define LCD_E_DIR       TRISCbits.TRISC0

enum port_dir{ output, input };
enum port_DCAC{ digital, analog };
enum led_state{ led_OFF, led_ON };
enum button_state{ pushed, no_pushed };

__interrupt(high_priority) void high_isr(void){
    Nop();
}
__interrupt(low_priority) void low_isr(void){
    Nop();
}

void delay(void);
void portInit(void);
void LCD_rdy(void);
void LCD_init(void);
void LCD_cmd(char cx);
void send2LCD(char xy);
char keypad(void); 

void main(void) {
  
    char y;
    char arreglo [3];
    char count = 0;
    char resultado;
    char resultado_d;
    char resultado_u;
    portInit (); 
    LCD_init();
    LCD_cmd(0x80);
    while (1){
        y = keypad ();
        __delay_ms(300);
          arreglo [count] = y;
        y = y +48;
        send2LCD(y);
        count ++; 
       if (y == 61) {
            arreglo [1] = arreglo [1] +48;
           if (arreglo [1] == 43){
           
            resultado = arreglo [0] + arreglo [2];
          
            }
            if (arreglo [1] == 42){
           
            resultado = arreglo [0] * arreglo [2];
       
            }
          
            if (arreglo [1] == 45){
           
            resultado = arreglo [0] - arreglo [2];
           
            }
            if (arreglo [1] == 47){
           
            resultado = arreglo [0] / arreglo [2];
           
            }
             resultado_d = resultado / 10; 
            resultado_d = resultado_d + 48;
            LCD_cmd (0xc0);
            send2LCD (resultado_d);
            resultado_u = resultado %10;
            resultado_u = resultado_u +48;
            send2LCD (resultado_u);
            count = 0;
        }
        if (y == 24) {
            count = 0;
            LCD_cmd (0x01);
            LCD_cmd (0x80);
            
        }
        
      

            
        
    }
  
    
    return;
}
char keypad (void){
    while (1){
       LATBbits.LATB0=1;
        LATBbits.LATB1=1;
        LATBbits.LATB2=1;
        LATBbits.LATB3=0;
    if (PORTBbits.RB4 == 0){            
        return 24-48;         
    }
       
        else if (PORTBbits.RB5 == 0){ //cambair LATD POR RETURN
            return 1;
        }
        else if (PORTBbits.RB6 == 0){
            return 4;
        }
        else if (PORTBbits.RB7 == 0){
            return 7;
        }
    
        LATBbits.LATB0=1;
        LATBbits.LATB1=1;
        LATBbits.LATB2=0;
        LATBbits.LATB3=1;
        if (PORTBbits.RB4==0){
            return 0;
        }
        else if (PORTBbits.RB5 == 0){
            return 2;
        }
        else if (PORTBbits.RB6 == 0){
           return 5;
        }
        else if (PORTBbits.RB7 == 0){
            return 8;
        }
        LATBbits.LATB0=1;
        LATBbits.LATB1=0;
        LATBbits.LATB2=1;
        LATBbits.LATB3=1;
        if (PORTBbits.RB4==0){
            return 61-48; // gato #
        }
        else if (PORTBbits.RB5 == 0){
            return 3;
        }
        else if (PORTBbits.RB6 == 0){
            return 6;
        }
        else if (PORTBbits.RB7 == 0){
            return 9;
        }
        LATBbits.LATB0=0;
        LATBbits.LATB1=1;
        LATBbits.LATB2=1;
        LATBbits.LATB3=1;
        if (PORTBbits.RB4==0){
            return 43-48;
        }
        else if (PORTBbits.RB5 == 0){
            return 45-48;
        }
        else if (PORTBbits.RB6 == 0){
            return 42-48;
        }
        else if (PORTBbits.RB7 == 0){
            return 47-48;
        }
        
        
        
        }
    
}

void LCD_rdy(void){
    char test;
    LCD_DATA_DIR= 0b11111111;
    test = 0x80;
    while (test){
        LCD_RS=0;
        LCD_RW=1;
        LCD_E=1;
        test= LCD_DATA_R;
        Nop();
        LCD_E=0;
        test &=0x80;
    }
    LCD_DATA_DIR=0x00; 
}
void LCD_init(void){
    LATC=0;
    LCD_E_DIR=0;
    LCD_RS_DIR=0;
    LCD_RW_DIR=0;
    LCD_cmd( 0x38 );
    LCD_cmd( 0x0F );
    LCD_cmd( 0x01 );
}
void LCD_cmd( char cx ){
    LCD_rdy();
    LCD_RS=0;
    LCD_RW=0;
    LCD_E=1;
    Nop();
    LCD_DATA_W = cx;
    Nop();
    LCD_E=0;
}
void send2LCD( char xy ){
    LCD_RS=1;
    LCD_RW=0;
    LCD_E=1;
    LCD_DATA_W=xy;
    Nop();
    Nop();
    LCD_E=0;
}
void portInit( void ) {
    ANSELD = digital;
    ANSELB = digital;
    TRISBbits.TRISB0 = output; 
    TRISBbits.TRISB1 = output;
    TRISBbits.TRISB2 = output;
    TRISBbits.TRISB3 = output;
    TRISBbits.TRISB4 = input;
    TRISBbits.TRISB5 = input;
    TRISBbits.TRISB6 = input;
    TRISBbits.TRISB7 = input; 
    WPUB = 0b11110000;
    INTCON2bits.RBPU = 0;
    ANSELE = digital;
    
}
